---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: grafana
  namespace: observability
  labels:
    app.kubernetes.io/name: grafana
    app.kubernetes.io/instance: grafana
    app.kubernetes.io/version: "11.3.0"
---
apiVersion: v1
kind: Secret
metadata:
  name: grafana-admin
  namespace: observability
  labels:
    app.kubernetes.io/name: grafana
    app.kubernetes.io/instance: grafana
    app.kubernetes.io/version: "11.3.0"
type: Opaque
data:
  # admin / admin123
  admin-user: YWRtaW4=
  admin-password: YWRtaW4xMjM=
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: grafana-config
  namespace: observability
  labels:
    app.kubernetes.io/name: grafana
    app.kubernetes.io/instance: grafana
    app.kubernetes.io/version: "11.3.0"
data:
  grafana.ini: |
    [analytics]
    check_for_updates = true

    [grafana_net]
    url = https://grafana.net

    [log]
    mode = console

    [paths]
    data = /var/lib/grafana/
    logs = /var/log/grafana
    plugins = /var/lib/grafana/plugins
    provisioning = /etc/grafana/provisioning

    [server]
    domain = localhost
    http_port = 3000
    protocol = http

    [feature_toggles]
    enable = traceqlEditor correlations traceToMetrics publicDashboards

    [tracing.opentelemetry.otlp]
    address = tempo.observability.svc.cluster.local:4317
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: grafana-datasources
  namespace: observability
  labels:
    app.kubernetes.io/name: grafana
    app.kubernetes.io/instance: grafana
    app.kubernetes.io/version: "11.3.0"
    grafana_datasource: "1"
data:
  datasources.yaml: |
    apiVersion: 1
    deleteDatasources:
      - name: Loki
      - name: Tempo
      - name: Prometheus
    datasources:
      # Loki for logs
      - name: Loki
        type: loki
        access: proxy
        url: http://loki.observability.svc.cluster.local:3100
        uid: loki
        isDefault: false
        editable: true
        jsonData:
          maxLines: 1000
          derivedFields:
            - datasourceUid: tempo
              matcherRegex: '(\w+)'
              name: TraceID
              url: '$${__value.raw}'
              urlDisplayLabel: 'View Trace'

      # Tempo for traces
      - name: Tempo
        type: tempo
        access: proxy
        url: http://tempo.observability.svc.cluster.local:3200
        uid: tempo
        isDefault: false
        editable: true
        jsonData:
          httpMethod: GET
          tracesToLogs:
            datasourceUid: 'loki'
            spanStartTimeShift: '-1h'
            spanEndTimeShift: '1h'
            filterByTraceID: true
            filterBySpanID: false
            tags: [{'key': 'service.name', 'value': 'service_name'}]
          tracesToMetrics:
            datasourceUid: 'prometheus'
            spanStartTimeShift: '-1h'
            spanEndTimeShift: '1h'
            tags: [{'key': 'service.name', 'value': 'service'}, {'key': 'job'}]
            queries:
              - name: 'Sample query'
                query: 'sum(rate(traces_spanmetrics_latency_bucket{$$__tags}[5m]))'
          serviceMap:
            datasourceUid: 'prometheus'
          search:
            hide: false
          nodeGraph:
            enabled: true
          lokiSearch:
            datasourceUid: 'loki'

      # Prometheus for metrics (assuming it exists or will be added)
      - name: Prometheus
        type: prometheus
        access: proxy
        url: http://prometheus.monitoring.svc.cluster.local:9090
        uid: prometheus
        isDefault: true
        editable: true
        jsonData:
          httpMethod: POST
          exemplarTraceIdDestinations:
            - datasourceUid: tempo
              name: TraceID
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: grafana-dashboards-config
  namespace: observability
  labels:
    app.kubernetes.io/name: grafana
    app.kubernetes.io/instance: grafana
    app.kubernetes.io/version: "11.3.0"
data:
  dashboards.yaml: |
    apiVersion: 1
    providers:
      - name: 'otel-dashboards'
        orgId: 1
        folder: 'OpenTelemetry'
        type: file
        disableDeletion: false
        editable: true
        updateIntervalSeconds: 30
        allowUiUpdates: true
        options:
          path: /var/lib/grafana/dashboards/otel
      - name: 'system-dashboards'
        orgId: 1
        folder: 'System'
        type: file
        disableDeletion: false
        editable: true
        updateIntervalSeconds: 30
        allowUiUpdates: true
        options:
          path: /var/lib/grafana/dashboards/system
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: grafana-otel-dashboard
  namespace: observability
  labels:
    app.kubernetes.io/name: grafana
    app.kubernetes.io/instance: grafana
    app.kubernetes.io/version: "11.3.0"
data:
  otel-overview.json: |
    {
      "dashboard": {
        "id": null,
        "title": "OpenTelemetry Overview",
        "tags": ["opentelemetry", "observability"],
        "timezone": "browser",
        "refresh": "30s",
        "time": {
          "from": "now-1h",
          "to": "now"
        },
        "panels": [
          {
            "id": 1,
            "title": "Service Map",
            "type": "nodeGraph",
            "targets": [
              {
                "expr": "",
                "refId": "A",
                "datasource": {
                  "type": "tempo",
                  "uid": "tempo"
                }
              }
            ],
            "gridPos": {"h": 8, "w": 24, "x": 0, "y": 0}
          },
          {
            "id": 2,
            "title": "Recent Traces",
            "type": "trace",
            "targets": [
              {
                "query": "",
                "refId": "A",
                "datasource": {
                  "type": "tempo",
                  "uid": "tempo"
                }
              }
            ],
            "gridPos": {"h": 8, "w": 12, "x": 0, "y": 8}
          },
          {
            "id": 3,
            "title": "Log Volume",
            "type": "stat",
            "targets": [
              {
                "expr": "sum(rate({job=~\".+\"}[5m]))",
                "refId": "A",
                "datasource": {
                  "type": "loki",
                  "uid": "loki"
                }
              }
            ],
            "gridPos": {"h": 8, "w": 12, "x": 12, "y": 8}
          }
        ]
      }
    }
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: grafana
  namespace: observability
  labels:
    app.kubernetes.io/name: grafana
    app.kubernetes.io/instance: grafana
    app.kubernetes.io/version: "11.3.0"
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: grafana
      app.kubernetes.io/instance: grafana
  template:
    metadata:
      labels:
        app.kubernetes.io/name: grafana
        app.kubernetes.io/instance: grafana
      annotations:
        checksum/config: {{ include (print $.Template.BasePath "/configmap.yaml") . | sha256sum }}
        checksum/datasources: {{ include (print $.Template.BasePath "/datasources-configmap.yaml") . | sha256sum }}
    spec:
      serviceAccountName: grafana
      securityContext:
        runAsNonRoot: true
        runAsUser: 472
        runAsGroup: 472
        fsGroup: 472
      initContainers:
        - name: init-chown-data
          image: busybox:1.31.1
          imagePullPolicy: IfNotPresent
          securityContext:
            runAsNonRoot: false
            runAsUser: 0
          command:
            - chown
            - -R
            - "472:472"
            - /var/lib/grafana
          resources:
            limits:
              cpu: 100m
              memory: 128Mi
            requests:
              cpu: 100m
              memory: 128Mi
          volumeMounts:
            - name: storage
              mountPath: /var/lib/grafana
      containers:
        - name: grafana
          image: grafana/grafana:11.3.0
          imagePullPolicy: IfNotPresent
          ports:
            - containerPort: 3000
              name: http-web
              protocol: TCP
          env:
            - name: GF_SECURITY_ADMIN_USER
              valueFrom:
                secretKeyRef:
                  name: grafana-admin
                  key: admin-user
            - name: GF_SECURITY_ADMIN_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: grafana-admin
                  key: admin-password
            - name: GF_PATHS_DATA
              value: /var/lib/grafana/
            - name: GF_PATHS_LOGS
              value: /var/log/grafana
            - name: GF_PATHS_PLUGINS
              value: /var/lib/grafana/plugins
            - name: GF_PATHS_PROVISIONING
              value: /etc/grafana/provisioning
          livenessProbe:
            httpGet:
              path: /api/health
              port: http-web
            initialDelaySeconds: 60
            timeoutSeconds: 30
            failureThreshold: 3
          readinessProbe:
            httpGet:
              path: /api/health
              port: http-web
            initialDelaySeconds: 30
            timeoutSeconds: 30
          resources:
            limits:
              cpu: 1000m
              memory: 2Gi
            requests:
              cpu: 100m
              memory: 256Mi
          volumeMounts:
            - name: config
              mountPath: /etc/grafana/grafana.ini
              subPath: grafana.ini
            - name: storage
              mountPath: /var/lib/grafana
            - name: datasources
              mountPath: /etc/grafana/provisioning/datasources
            - name: dashboards-config
              mountPath: /etc/grafana/provisioning/dashboards
            - name: otel-dashboards
              mountPath: /var/lib/grafana/dashboards/otel
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
                - ALL
            readOnlyRootFilesystem: false
      volumes:
        - name: config
          configMap:
            name: grafana-config
        - name: datasources
          configMap:
            name: grafana-datasources
        - name: dashboards-config
          configMap:
            name: grafana-dashboards-config
        - name: otel-dashboards
          configMap:
            name: grafana-otel-dashboard
        - name: storage
          persistentVolumeClaim:
            claimName: grafana-storage
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: grafana-storage
  namespace: observability
  labels:
    app.kubernetes.io/name: grafana
    app.kubernetes.io/instance: grafana
    app.kubernetes.io/version: "11.3.0"
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 1Gi
---
apiVersion: v1
kind: Service
metadata:
  name: grafana
  namespace: observability
  labels:
    app.kubernetes.io/name: grafana
    app.kubernetes.io/instance: grafana
    app.kubernetes.io/version: "11.3.0"
spec:
  type: ClusterIP
  ports:
    - name: service
      port: 80
      protocol: TCP
      targetPort: 3000
  selector:
    app.kubernetes.io/name: grafana
    app.kubernetes.io/instance: grafana
---
apiVersion: monitoring.coreos.com/v1
kind: ServiceMonitor
metadata:
  name: grafana
  namespace: observability
  labels:
    app.kubernetes.io/name: grafana
    app.kubernetes.io/instance: grafana
    app.kubernetes.io/version: "11.3.0"
spec:
  endpoints:
  - interval: 30s
    port: service
    path: /metrics
  selector:
    matchLabels:
      app.kubernetes.io/name: grafana
      app.kubernetes.io/instance: grafana

